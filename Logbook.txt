January 2016 – decided on Capstone Project, started researching software side

Summer 2016 → January 2018 – Software design, both backend (Java, mysql) and frontend (php/HTML). Will add more details later based on Git commits. Stuff tried and didn’t work, mistakes made in code, etc.

January 3rd, 2018 – Asked Robert about recommendations on hardware. Started looking up chips.
January 9th, 2018 – Asked Robert opinion about FTDI FT232R IC. He told me it is UART and is not the correct chip. He recommended MAX232. Sought clarification from Brian on the voltage levels required for RS232. He recommended CP2202 chip. Researched difference between UART and RS232 online. After a discussion with Robert, determined by my own reading of the datasheets, that I require a MAX232 with a UART chip. I decided to use a MCP2200 as the UART chip because it is available as a SOIC, which is easier to solder to the board. The MAX232 is available as both a DIP and a SOIC. I plan on ordering the SOIC version of the MAX232.
January 10th, 2018 – Discussed with Robert required power for the sign. Possibly 120V AC, not checked internally yet. Robert found seven MAX232 chips that I can use.
January 11th, 2018 – Looked up online how to design custom chip (footprint only) in Multisim. Started designing custom chip in Multisim (for board layout) for MCP2200. Searched online looking for the differences between MCP2200 versions. Discussed in class fall-back options, in my case it would be to use an off-the-shelf USB to Serial RS232 cable. I already have one at home.
	With Robert’s help, I took apart the Series Two screen to examine it. The screen is currently hooked up to accept a RS422 connection. I plan to reconfigure it to accept a RS232 connection with Rx, Tx, and GND. The Rx to accept the message plus checksum, etc. The Tx to send back a confirmation code. The screen currently has address 1. Sent e-mail to Robert asking him to order two MCP2200-I-SO chips.
January 13, 2018 – Created a function diagram for the USB to RS232 board I plan to create. It is located in my Dropbox folder. Found typical circuit configuration for the MAX232, p.10 of its datasheet. It requires 4 – 1µF capacitors.
January 15, 2018 – Discussion with Robert and Brian. Determined that I will solder a USB mini connector (female) on one side of the board and a DB9 (female) on the other side. Signed up for no-ip.com DDNS. Use: eetsign.ddns.net Mistake, should be DB9 (Male), just stated wrong. Discussed DynDNS with Darrell across the hall, not a lot of help but I did get a better understanding of DynDNS. Talked to Shawn downstairs about DynDNS, found out that it is not possible on the school network. I will have to use my own router and connect the PI and my computer to the router to access the PI's webserver.
                    Found an error in the mysql database, both on the Java side and the php side. Java gives a nice error: Can not issue data manipulation statements with executeQuery(). PHP complains about access denied for user client@localhost.
                    Fixed the mysql errors by removing both the javauser and client and recreating them. Then granting them SELECT and UPDATE privileges.
January 17, 2018 - Robert told me that the MCP2200 chip had a 5 week lead time on it. I found a different site online, arrow.com, that could ship it the next day. 
                    I ordered it from arrow.com, using my credit card. Discussion with Brian about ordering and designing PCBs. He suggests ExpressPCB. 
                    I looked into it a little 3 different designs that are offered in the small size, $41, $51, or $61 for 3 boards.
                    ExpressPCB do offer free board design software. I plan on installing it and start designing the board, once I determine which pins need to be connected where.
January 18, 2018 - Discussion with Brian about solder mask, silk screening and other components required (other than MAX232 and MCP2200).
                    Created a Materials list spreadsheet, in Capstone folder. Built first version of the full circuit in Multisim, file in Capstone folder.
                    I searched for a 12MHz crystal oscillator among the boards in the soldering lab. Ordered crystal oscillator (12MHz) from Arrow, using my credit card.
                    Built custom chips in ExpressPCB software, after asking Brian and Robert some questions about SOIC specifications.
January 19, 2018 - Created a 12MHz crystal layout in ExpressPCB. Made some slight layout changes in Multisim (no wiring changes). 
                    Made the pin numbers line up with there respective pins by editing each chip manually and making the numbers visible.
                    Tried to desolder mini-USB port and DB9 port, was not successful.
                    Found datasheet for DB9 port (put in Capstone folder), started designing ExpressPCB part for it.
January 22, 2018 - Sought help from Brian to desolder DB9 and mini-USB ports. Brian finished desoldering mini-USB port. He helped free up the DB9, I still have to finish desoldering that.
                    I finished desoldering the DB9 port. I bent the pins slightly, but they bent back fine. Robert told me afterwards that he has some straight (not 90 degree) DB9 ports somewhere.
                    I still have to get rid of the solder on the mounting pins on the DB9 port.
                    I done up a fairly exhaustive parts list, including software that runs on the Raspberry Pi and my laptop.
                    Moved stuff around on the MultiSim schematic, it is now easier to read.
                    Started writing Phase 1 Intro, Requirements, Specifications, and Objectives.
January 23, 2018 - Finished creating custom parts in ExpressPCB. Asked Brian a few questions about info on the schematic diagrams in the datasheets. Example: "What does rad mean on the diagram?"
January 24, 2018 - Asked Robert for Vernier Calipers to verify the measurements of the mini USB port. I had to look up online how to read them correctly. The port's dimensions are almost exactly what is in the USB datasheet I used to design the pads.
                    Completed Phase 1 report, including function diagram, MultiSim schematic, introduction, objectives, requirements, specifications, contingency. I also updated the parts list to add some tools that may be required.
                    Sought clarification on the detail Robert is looking for in the Gant chart. Adjusted my Gant chart slightly to fit his outline. 
January 25, 2018 - Added MultiSim and ExpressPCB Plus to software parts list.
                    Formatting changes and correcting grammar in Phase 1 report. Found an error in my MultiSim schematic, RTS and CTS should be tied together.
January 26, 2018 - Started designing first revision of PCB.
January 29, 2018 - Added posAck and negAck for Verify mode in SeriesTwo file. Added, but not completed readAck method in SeriesTwo file.
                    Finished writing readAck method. Changed write method to call readAck and recursively call write method if readAck returns false.
                    Reason for these changes is because I forgot to account for verify mode returning a value.
                    Asked Robert about opening and closing ports, determined that did not have to close port at the end of testWrite or open a new port at the start of testRead.
                    Asked Robert and Brian for 1uF capacitors, have 4 of both electrolytic and ceramic now.
                    Installed Putty to test java program's serial connection.
                    Discussed with Brian some programming errors I am having regarding testRead(), it still comes up with Waiting for Read line but never actually reads anything you type in the connected putty terminal.
January 31, 2018 - Various changes to testRead() and serialEvent methods in Test.java, still does not read correctly. Did ask Brian a quick question about missing variable type, it was supposed to be declared as boolean (ready variable).
                    Discussed with Brian, found my USB power traces were in the wrong places, switched VCC and GND.
                    More wiring in ExpressPCB.
February 1, 2018 - Asked Robert for some 105 (1uF) capacitors and some large (2, 5.6, 10Mohm) resistors. He found them in the storage room.
                    Encountered an inconvenience that I disregarded. A SOIC, which the MCP2200 is, is impossible to place in a breadboard. 
                    After discussing with Robert and Brian, I have decided that I am going to solder wires to only the pins needed. Then place the wires in a zero-insertion-force socket to place it on the board.
                    Slight changes to wiring colours in MultSim, Tx wires are now Blue, Rx wires are now Green.
                    Added yellow wire in MultiSim, will be yellow wires on bread board.
                    Attempted to solder wires to the approriate pins on the MCP2200, broke pin 1 off.
                    Ordered 2 more MCP2200-I-SO and a SOIC to DIP adapter from Arrow. Should arrive by Feb 6. Added some parts to the parts list (breadboard, adapter).
                    Added more parts and traces to ExpressPCB board design.
                    Discussed with Robert some issues related to C5, C6, C7, and C8 placement.
                    Decided to change from R1 & T1 pins on the MAX232 to R2 & T2 pins. MultiSim schematic updated.
February 2, 2018 - Asked Robert about programming issue with testRead() and serialEvent() methods.
                    Robert came up with the solution to use a flag to see if the acknowledge has been checked.
                    Put the SeriesTwo sign back together, mostly anyway. Attached a 120V 3-wire plug.
                    Tested the sign by plugging it in. It powers on and lights up all of the LEDs, then displays "Self Test Passed 2.50".
February 5, 2018 - Tried several things in Test.java's serialEvent method, have not been able to test it successfully.
                    Cut off the male end of a DB9 cable. Stripped several wires until I was able to find the GND wire. Rx and Tx were easy. 
                    I looked online for DB9 colour code, the colours for Rx and Tx were correct, GND was not.
                    Plugged in sign and tried to test serial output, it does not send anything back at the moment, it is not supposed to send anything back unless something is sent to it.
                    Added the power cable to the Parts List.
February 6, 2018 - Slight change to PCB, in ExpressPCB, updated C1 and C2 to the appropriate size (0.125 capacitors).
                    Started to build circuit on breadboard. Waiting for SOIC adapter to arrive. I want to test the circuit on the bread board before ordering the PCB.
                    Added Pin numbers to MultiSim Schematic. Finished drawing the traces in ExpressPCB.
February 7, 2018 - Determined I cut off the wrong end of the DB9 cable attached to the sign. Robert handed me a DB9 female port to solder to the end. 
                    Robert would not let me cut off the correct end off new cable.
                    Asked Robert some questions about how to put DB9 port kit together. Had to resolder green wire because it fell off.
                    Asked Brian about mounting hole allowances for the DB9 port. He said just use the ExpressPCB part.
                    Changes to ExpressPCB board, changed out DB9 port for the one from default library. Added top cut line on board.
February 8, 2018 - Discussion with Robert on how to solder the MCP2200 SOIC to the SOIC-to-DIP converter. Read the instruction book that came with the converter board.
                    Soldered the chip to the board and the pin header to place on the bread board.
                    Asked Brian to check my surface soldering work, he told me to touch up two pads.
                    Added USB A (male on one end and no end on other side) to Parts list. It will only be used for testing.
                    Cut off the end and tinned the wires of the USB cord using the solder pot.
                    Finished building circuit on bread board, plugged in. Not tested yet, still looking for Windows 7 drivers.
                    Tested the circuit. Can not get an oscillator signal. No device or Unknown USB device shows up in Window's Device Manager.
                    Tried changing some things, R1 upped the Resistance, C3 changed from 424 Capacitor to 224. No change.
                    Tried adding a pull down resistor to pin 4 (RST) on the MCP2200, also tried tying it HIGH or LOW.
                    Removed the crystal and C1 and C2 capacitors from the circuit to try and test just the oscillator, can't figure out what signal to give it.
                    Got Robert to look at the circuit, he suggested adding a pull up resistor to the D+ line. Have not tried this yet.
                    MultiSim and ExpressPCB not updated yet.
February 12, 2018 - Found reference to placing a 22ohm resistor on D+ and D-. Did not try it yet. Tried placing a 10kohm + 470ohm resistor, with filtering capacitor to Reset (pin 4). 
                    Did not come up in computer at all, neither USB not recognized or any new device. 
                    Reverted circuit on breadboard and MultiSim back to what came up USB not recognized (Reset tied HIGH, nothing else).
                    Discussed with Robert potential problems with the circuit, he believes something is missing. He suggested looking in the MCP2200 datasheet. I plan on reading more into it this week.
                    Robert also recommended plug in the pre-made USB-to-RS232 cable into the LED sign. He wants to see the sign working before I finish building the board. 
                    I plan on getting the sign and software interface working first, as he suggests.
                    Plugged in sign and pre-made USB-to-RS232 cable. Reverted changes made to RS232Tester.java, uncommented write and CheckDB lines, commented out readAck line.
                    Sat down with Robert and tested my pre-made serial cable on the oscilloscope. Got it to read a character of data.
                    Brian suggested sending a single character to the screen from the computer, not Raspberry PI.
                    Robert and I were able to see the output on the Oscilloscope, 1ms window, 5V/div. Just clicked run/stop when noticed the data.
                    Brian recommended Bray's Terminal on Windows and Mini Terminal on Linux for serial I/O.
                    Tried the following command: #0011#002This is a test.#00418C#013
                    Did not work.
February 15, 2018 - Discussed with Brian sending the sign a byte array instead of string or char. Trying to get Bray's Terminal to send info to sign. No luck yet.
                    Tried using several different cables to send a character to the terminal (Rx and Tx tied together). It did not send. I even tried a different cable, no luck there either.
                    Sent Brian the pdf manuals for the sign (both programming and hardware).
                    Figured out the problem, I forgot to click a Connect button (top left corner) on the Bray's Terminal screen. Now to get back to testing.
                    Hooked up an oscilloscope to the ICL232CPE chip on the sign (RS232 driver), specifically the Rx pin (13) and GND.
                    Changed to 600 baud and tried several commands. The working one was this: #002EET Marconi#003
                    Changed it back to 9600 baud and sent the same command it worked. Next up try the same test via my program running the PI.
                    Terminal Settings were: 8N1, 9600 baud, no handshaking.
                    Brian gave me two DB9 female headers for my board, never used. Same style as the one I desoldered, but never used.
                    After slight changes to the SeriesTwo.java file, to copy the format sent from the PC, the sign display the message input from the MySQL database, via the webserver.
February 16, 2018 - Plan to try to send a message to the sign in Non-Verify Mode using the Raspberry Pi.
                    The following did not work: header + address + startMes + body + CR;
                    Did not work: startMes + body + CR;
                    The following string worked: startMes + body + endMes + CR; Now to test scroll and blink.
                    Did not work: startMes + (char) 0x19 + body + endMes + CR;
                    The following string worked in non-verify mode: header + address + startMes + scroll + body + endMes + ETX + CR;
                    Decided to hardcode serial port into Test.java, /dev/ttyUSB0. Tested and it works fine.
                    Tried verify mode using this string, did not work: header + address + startMes + scroll + body + endMes + numseq + chksum + ETX + CR;
                    Did not work: header + address + startMes + body + endMes + numseq + chksum + CR;
                    Did not work: header + address + startMes + body + endMes + numseq + chksum + ETX + CR;
                    In Bray's Terminal this worked in verify mode: #0011#002This is a test.#00418C#013
                    Also: #0011#002This is a test.2#0042BF#013 and #0011#002This is a test.3#0043C1#013
                    Set up 3 Macros in Bray's Terminal to test 3 different string in verify mode.
                    Did not work on Pi: (char) 0x1 + "1" + (char) 0x2 + "This is a test." + (char) 0x4 + "1" + "8C" + CR;
                    Did not work on Pi: header + address + startMes + body + endMes + "4" + "8F" + CR;
                    Did not work on Pi: header + address + startMes + "This is a test" + endMes + "4" + "8F" + CR;
                    Did not work on Pi: header + address + startMes + "This is a test.3" + endMes + "3" + "C1" + CR;
                    Did not work on Pi: header + address + startMes + "This is a test." + 3 + endMes + 3 + "C1" + CR;
                    Went back to non-verify mode and tested the format that worked above, it still works. 
                    Went back to verify mode and tried this, did not work: header + address + startMes + body + endMes + numseq + chksum + ETX + CR;
                    Did not work on Pi: header + address + startMes + body + endMes + "2" + "8D" + CR;
                    Decided to test the output from the Pi by connecting it to my computer instead of the sign.
                    Verified the output of the Pi, it is outputting exactly what the computer sends to the sign for verify mode.
                    When the first message is sent, the Pi first sends part of the message and then sends the whole thing again. It does not do this on subsequent messages.
                    Found an error, CR was set to 0x13, instead of 0xD.
                    The working verify string is this: header + address + startMes + body + endMes + numseq + chksum + CR;
                    Next step is to update either the java back-end or the PHP/HTML front-end to handle the 20 character max for blink/none and 120 character max for scroll.
                    Also, java back-end does not handle scroll or blink at all. 
                    Front-end needs a blink rework (should be blink on button and blink off button to insert the two characters).
February 18, 2018 - Started changing the PHP front end to better handle Blinking. 
                    Added Blink ON and Blink OFF buttons, not yet tested. 
                    Removed Blink ON radio button.
February 20, 2018 - Talked to Brian this morning. He informed me that I had the Tx line in the wrong spot on the sign. 
                    He was able to get the sign to work in terminal mode via the Arduino.
                    Tested PHP front-end, Blink ON and Blink OFF buttons do not work.
                    Asked Brian about how to concatenate strings in PHP. He was not sure on it.
                    Trying this instead of +: "$message .= "~^|""
                    Did not work, trying this instead: "this.form.message.value .= "...
                    Trying this: "this.form.message.value = this.form.value.concat("|^~");"
                    Got an error message: The requested URL /name="form""/index.php" was not found on this server.
                    I added a name to the form and it did not like it.
                    Did not work, trying this instead: onClick="this.form.message.value=this.form.value.concat('~^|');"
                    Also did not work.
                    Discussion with Brian, determined that I need to use javascript instead of PHP to handle the blinkON and blinkOFF buttons.
                    Found a good example online and started to implement it.
                    https://stackoverflow.com/questions/13941055/add-a-string-of-text-into-an-input-field-when-user-clicks-a-button
                    Installed Firefox on the Raspberry Pi. Still can't get the javascript code to add text via buttons.
                    Tried various things in javascript.
                    This ended up working: 
                        function blinkONtext() {
                            var newtext = document.form1.message.value;
                            document.form1.message.value += "~|^";
                        }
                        <form name="form1">
                        <input type="button" value="Blink ON" id="button" onClick="blinkONtext()"/>
                        </form>
                    Robert provided me with a power plug to plug the sign into for easy sign Resetting.
                    Added it to parts list.
                    Tested the above code and it appends the appropriate string to what is already in the textbox.
                    Next step is to add the Java code to handle the Scroll and Blink
                    Scroll code was slightly changed to handle hex correctly.
                    Added a checkBlink method to replace ^|~ and ~|^ with the respective control codes (0x10 and 0x12). 
                    Not tested yet.
                    Neither blink or scroll work at the moment. Going to test the format using Bray's Terminal.
                    Tried sending via Bray's Terminal this, did not work: #0011#002#019This is a test.2#0042D8#013
                    Got a NAK from the sign.
February 21, 2018 - Testing Scroll in verify mode on Bray's Terminal.
                    This did not work: #0011#002#019This is a test.#0041A5#013
                    Nor this: #0011#002#019This is a test.#004#0031A8#013
                    Nor this: #0011#002#019This is a test.#003#0041A8#013
                    In non-verify mode this worked for scrolled text: #0011#002#025This is a test.#004#003#013
                    Note, scroll character is 0x25, not 0x19 like the manual is says.
                    Changed back to verify mode and test with this: #0011#002#025This is a test.#0041B1#003#013 (did not work)
                    Tried all of the hex values between 0x19 and 0x26 (none work), each time changed the checksum to match.
                    Did not work: #0011#002#025This is a test.#004#013
                    Decided to test via the Raspberry Pi instead, in verify mode.
                    Changed the hex code to 0x25 in RS232Tester.java, displays %Hello (when sent Hello and scroll).
                    Tried looping through all of the hex values between 0x6 and 0x128. 
                    Nothing displayed on the screen (just SELFTEST message).
                    Commented out for loop and tested write again, it writes fine without any scroll.
                    Uncomment all of the for loop stuff and test again. Did not work.
                    Changed scroll from int to char, added Thread.sleep so that I may see the scroll.
                    Did not work, I let the for loop go to 0x27 but it never did scroll or change the display.
                    Decided to go back to testing on Bray's Terminal.
February 22, 2018 - Discussed with Brian possible solutions to scrolling in verify mode problem. No definitive suggestion came out of it though.
                    Wrote a CheckSumCalc java program to calculate the check sum of a typed in text and scroll character. 
                    Tested it with just the body and it output the correct checksum.
                    The checksum calculated was the same as what I calculated manually yesterday, A5 if a scroll character is 0x19.
                    Tested other strings without the scroll character and they display fine with the calculated checksum.
                    Brian did suggest to verify that this specific model of the Series Two sign supports scroll and blink.
                    Made small changes to calculateChksum method, no change in calculated checksum though.
                    Tried Blink ON and Blink OFF using Bray's Terminal and calculated checksum.
                    Tried reversing 0x10 and 0x12, placing them at start and end of body, placing them around a single word, etc.
                    Nothing worked.
                    Went back to scroll. The following worked in non-verify mode: #0011#002#025This is a test.#004#003#013 
                    Note: scroll character is 0x25 not 0x19 as per manual
                    When a checksum is added in non-verify mode it still displays correctly.
                    The checksum was added between #004 and #003.
                    My guess is that it just does not check the checksum.
                    Tried the same string: #0011#002#025This is a test.#0041B1#003#013 in verify mode and it did not respond at all.
                    Changed back to non-verify mode to try and find the correct Blink characters.
                    The following worked in Bray's Terminal, in verify mode (scroll character is 25 decimal, 0x19: #0011#002#025This is a test.#0041A5#013
                    #000 is decimal in Bray's Terminal, $00 is hex.
                    Blink mode also works in verify mode: #0011#002This is a $10test$12.#0041AE#013
                    Now that I know the format, I will update the java code to match.
                    Did not work: message = header + address + startMes + "19" + body + endMes + numseq + chksum + CR;
                    Did not display "19" anywhere.
                    Did not work: "25"
                    The following worked: checksum is calculated using 25.
                    scroll character 0x19 is appended ahead of the body in the write method.
                    Working scroll code:    char scrollChar = (char) 0x19;
                                            message = header + address + startMes + scrollChar + body + endMes + numseq + chksum + CR;
                    Determined that LED Display Message webpage must be reloaded before a new message is sent.
                    Discussion with Robert and Brian about what to do with Blink. Decided Character array is the best option.
                    Blink and Scroll now both work via the Raspberry Pi. checkBlink needed significant overhaul.
                    I decided to put the String body (with or without the blink delimiters) in an ArrayList.
                    As the program is adding the characters to the ArrayList it checks for the delimiters. 
                    If they are found it replaces them with the hex code and does not add the other two delimiters.
                    Robert suggested I add code to support temperature sensors and other dynamic data. I told him that was not the plan.
                    I plan on sticking with Static data.
February 23, 2018 - Changed sleep to 15 seconds in RS232Tester.java. 
                    Removed for loop in the same file, not needed.
                    Had to add a while (true) forever loop so the program is always running.
                    Changes to testRead method in Test.java, readString does not have a timeout or byte count now.
                    Removed check for getEventValue = 0 in serialEvent method.
                    Added a while loop in testRead method.
                    Removed check for readLine2 == null, in testRead method.
                    Still getting a null pointer exception on Line 177 (the while method I just added).
                    Did not work: ( readLine2.equals("S")) or ( (readLine2.equals("S")) || (readLine2 == null) )
                    Did not work: ( readLine2.equals("S") || (readLine2 != null && !readLine2.equals("")) )
                    Did not work: ( (readLine2.equals("S")) || (readLine2 != null && !readLine2.isEmpty()) )
                    Did not work: ( (readLine2.equals("S")) || (readLine2 == null) )
                    Did not work: ( (readLine2 == null) || (readLine2.equals("S")) )
                    Loops forever currently but does not cause a null pointer exception: ( (readLine2 == null) )
                    Did not work: readHexString(10)
                    Tried leaving port open after writing, do not open a new port for read.
                    Tried commenting out all of the write code and testing with just the read code. Can get it to read sometimes but it seems random.
                    Tried commenting out all of testRead except for openP() and closeport(). Still did not work.
                    The basic call to readString() works in testRead() but it outputs a ton of nulls and never gets the whole string.
                    This: serialPort.readString(10); only reads in 10 characters and it will wait for it to receive them.
                    The following works, it waits for 10 bytes: serialPort.readBytes(10);
                    Uncommented the write code and tested the read code by hooking it back up to the sign.
                    The program is waiting for more bytes. 
                    Going to try lowering the byte count by 1 until it works with the test string "This is a test." at least.
                    It works with 9. 
                    Acknowledge code (0x6) is in 4th in the array.
                    The output for "This is a test." is "1 48 49 6 4 49 57 68 13"
February 25, 2018 - Wrote sections of the Phase 2 Report.
February 26, 2018 - Finished the Phase 2 Report, updated Function Diagram to show how acknowledge boolean is handled. Same process but in reverse.
February 28, 2018 - Changed testRead (in Test.java) so that it returns byte [] readArray instead of boolean.
                    Changes to readAck to handle the byte array (readArray) and check if 
                    4th byte is 6 (positive acknowledge). If it is, return true, else return false.
March 1, 2018 -     Set a static ip on the eth0 interface on the Raspberry Pi, as per this: 
                    Edit /etc/dhcpcd.conf as follows:-
                    Here is an example which configures a static address, routes and dns.
                        interface eth0
                        static ip_address=10.1.1.30/24
                        static routers=10.1.1.1
                        static domain_name_servers=10.1.1.1
                    Tried to access the webserver at 192.168.60.200, from lab computer. Did not work.
                    Asked Brian why and it was because some of the computers in the lab are not on the 192.168.60.* network.
                    I was logged into one of those computers. Right-hand under station 54.
                    Was able to access the webserver from the computer in front of station 60.
                    Tested readAck changes, they work fine. Just commented out not required print statements.
                    MariaDB changes: added a column to hold error codes, int type. Removed column blinkON.
                    Added a serialConnected method to check if the serial port is connected, Test.java
                    Added a getConnected method, SeriesTwo.java, to send the get the connected boolean 
                    (true if serialport is connected) back to the main method (RS232Tester.java).
                    Added setPortError, CheckDB.java, to handle port not found errors.
                    Added code to handle port not connected error, RS232Tester.java. Not tested.
                    Moved portConnected condition inside of while (true) loop, RS232Tester.java. It checks it every time it loops.
                    Tried to send a new message after removing the BlinkON column and got an error on the PHP side.
                    Edited the PHP file to remove all instances of BlinkON column and BlinkON variable (not the new BlinkON button).
                    Changed so that getConnected is called every loop and test.setPortError is only called when the sign needs to be updated. (RS232Tester.java)
                    CheckDB's setPortError now accepts a boolean portConnected. The method updates the Error column based on the boolean.
                    Sets it to 1 if the port is not connected, 0 if it is.
                    Moved setPortError call above selectisUpdated condition, RS232Tester.java.
                    Tested, would through a bunch of errors (Port not opened, etc), if the port is removed.
                    Added portConnected condition to the if statement, RS232Tester.java.
                    Asked Brian opinion about the 15sec sleep in java. He said 15 seconds is reasonable.
                    It is not a real time application so 15 second delay is fine.
                    Added PHP code to handle error checking on front-end, not tested yet.
                    The following echos the data to the user's screen: 
                        $sql = 'SELECT error FROM t';
                        $rs = $conn->query($sql);
		
                        if ($rs->num_rows > 0) {
                            // output data of each row
                            $error = 0;
                            while($row = $rs->fetch_assoc()) {
                                echo "error: " . $row["error"];
                            }
                        }
                    Discussed with Robert next steps, finish PHP error handling and then focus on hardware.
                    Told Robert about the FTDI chip. He suggested finding a crystal oscillator test circuit.
March 5, 2018 -     Built UART circuit on different breadboard. Soldered pin headers on the USB cable.
                    Robert helped me troubleshoot the USB-to-UART circuit. Still not working, but at least it shows as USB not recognized in Windows.
                    A 1.5kOhm resister was added to tie D+ high. Schematic was updated, PCB was not.
                    CTS pin is tied high.
                    Tried plugging the USB plug into the Raspberry Pi, it works. Or at least it now has a Oscillator output and data signal.
                    Next step is to install linux drivers.
                    Brian told me that it is most likely because my laptop is not grounded. DC-floating ground only, no earth ground.
March 6, 2018 -     Discussed with Brian USB error in Linux, on the Raspberry Pi. He suggested looking up USB error codes online.
                    https://paulphilippov.com/articles/how-to-fix-device-not-accepting-address-error This site told me it is caused by hardware failure, overcurrent protection being tripped.
                    From that page's comments: 
                        Unfortunately it did not solve my issue, but as soon as I read here the error explanation - about over-current protection - I found root cause for my case.

                        For those guys, whom the first method (recommended by Paul) did not help, try to use a shorter cable to attach your device. 
                        It may sounds strange, but in my case I found a series of connect/disconnect events into dmesg and syslog as well. 
                        This behavior is a typical (as per my understanding) if you have a low-pass filter in between the usb port and the device attached - 
                        This low-pass filter (just a basic RC chain) is the result of combination of high input impedance and capacity caused by your cable. 
                        By using shorter (0.1m instead of 1m) cable did eventually solve the issue for me, but not power plug/unplug games...           
March 8, 2018 -     Discussion with Robert and Brian about USB cable grounding. They suggested adding a 1 Mohm resistor between the data lines and ground and the 5V line and ground.
                    Tested, did not work.
                    Tried with 15k resisters on the data lines, also did not work.
                    Asked for Robert's advice on troubleshooting the circuit. I found I could no longer get a oscillator signal.
                    He looked at the chip under a microscope and found that the chip was no longer soldered to the board.
                    He suggested replacing the chip anyway and resoldering it to the board.
                    I soldered a new MCP2200 chip to the Schmart board. 
                    I verified that all of the pins have <7ohm resistance between board pins and the chip.
                    Brian suggested soldering the crystal oscillator to the pins on the Schmart board.
                    As it it is, I get a square wave on either oscillator pin, of 60Hz.
                    Found a mistake, oscilloscope ground was in the wrong spot. Now I get 2.4V dc voltage on either oscillator pin, of 60Hz.
March 9, 2018 -     Robert suggested building a crystal oscillator test circuit. He found one online: http://www.qsl.net/g3pto/xtest.html
                    Built the circuit above and it oscillated at 12MHz.
                    Robert helped me troubleshoot the circuit this afternoon.
                    Before Robert left, we were able to get the circuit to oscillate at 12MHz.
                    He suggested I use the USB cable instead of trying to use a power supply.
                    The MCP2200 may require the D+ and D- lines in order to start oscillating.
                    After Robert left, I was able to test send and recieve on the UART by connecting it to another UART (Rx-Tx crossed).
                    Next step, wire up the MAX232 chip.
                    Wired the Max232 chip as per schematic except C7 and C8 (which are supposed to be 1uF) are 0.1uF.
                    The circuit works, at least Rx does. I have not tested Tx yet, can't figure out how to send characters via minicom.
                    Changed port name to match what the MCP2200 comes up as "/dev/ttyACM0", Test.java
                    Determined that the MCP2200 is receiving the characters I send it via my laptop (store bought cable) but I can't get anything to send from minicom (on the Pi), to my laptop.
                    No UART signal is sent from the MCP2200 to the Max232. A UART signal is sent the other way though (the signal from the laptop). Nearly impossible to see the data being sent on the USB lines though.
                    Nothing comes up in minicom or Bray's terminal. Tried switching Rx and Tx on the Max232.
                    Tried switching to the other Rx/Tx driver on the Max232, different set of pins. Did not work.
                    Burnt out two Max232 chips because I decided to use an external power supply on Pin 2 and 6, see datasheet for more info.
                    Still have more chips available.
March 11, 2018 -    Tested MCP2200 Rx and Tx by first tying Rx and Tx together. It works, what you type, shows up on the screen.
                    Next, I tested the MCP2200 by hooking it up to another UART and again it is sent correctly, both Rx and Tx.
                    I next tested the Max232 chip by tying its Tx and Rx lines on the output together. 
                    I can see what I type sometimes, but not everytime yet. It seems to send non-stop <break>.
                    http://ltxfaq.custhelp.com/app/answers/detail/a_id/736/~/what-is-a-serial-break%3F
March 12, 2018 -    Tested RS232 using MCP2200 and pre-made UART to RS232 board. Can receive and transmit.
                    Tried hooking up the MAX232 by sending it signals from the pre-made UART board. It did not receive anything. It only transmitted illegible characters.
                    Used Pin 11, 9, 14, and 8 on the MAX232.
                    Tried switching Rx and Tx on the lines sent to the computer (pre-made complete RS232 cable). Nothing is sent or received then.
                    Hooked up the oscilloscope to the Rx and Tx lines after the RS232 chip, did not get the correct output. Replaced the chip.
                    Discussed with Brian possible problems with the MAX232 circuit. He said that the C7 and C8 capacitors are used to hold the charge (for the 7-12V, either negative or positive). 
                    Replaced 104 capacitors, C7 and C8 with ceramic 1uF orange capacitors.
                    Tx and Rx lines are resting at 3V, should be between 7 and 12V. MAX232 output.
March 13, 2018 -    Discussed with Robert and Brian issues with MAX232 circuit. Brian suggested hooking up the pre-made USB to RS-232 cable to the MAX232. Got ~250mV peak output.
                    Brian noticed that I had the Cbypass capacitor from 5V to Pin16, it should have been between 5V and ground.
                    The current limit on the bench supply was turned down to low, turned it up until 5V is read with the chip attached.
                    With Brian's help the MAX232 circuit now works. The problem was a bad wire attached to the scope and a bad wire tying Rx and Tx together on the UART side of the MAX232.
                    I tested both chips together using my laptop. The test was successful, both Rx and Tx, using Bray's Terminal (my cable) and Arduino IDE serial Monitor (premade cable). 
                    Now, I have to change the circuit on the breadboard so that the MAX232 chip is powered via the USB bus and not an external supply.
                    The mistake (problem) with the bypass capacitor tied to 5V and Pin 16. The reason why I made the mistake is because the MAX232 schematic p.10, shows the 5V to Pin 16 and 5V to the bypass capacitor.
                    I thought the bypass capacitor went to Pin 16, not to ground, like in the schematic.
                    It works with the MAX232 powered off of the USB bus, tested both Tx and Rx.
                    Tested circuit again using ceramic capacitors on the MAX232, instead of electrolytic.
                    Rx and Tx still work.
                    Moved some of the components and connections on the ExpressPCB board.
                    Brian suggested moving the Crystal and its capacitors closer to the MCP2200.
                    He also suggested changing the 90 degree angles to 45 degrees.
March 14, 2018 -    Started a new board revision in ExpressPCB due to recommendations from Brian (45 degree angles, oscillator should be closer).
March 15, 2018 -    Consulted Brian on Board changes I made. I asked him several questions regarding board design (angles to use/to avoid, trace thickness, etc).
                    Angles to use, 90 degrees when connecting in a T, 45 otherwise. Avoid sharp angles.
                    Trace thickness, Power and ground traces should be about double the thickness of data traces.
                    Asked Brian about mounting screws, he suggested #6-32 or #4-40.
                    I also asked Brian about traces running under capacitors, in particular to the crystal (C2) and C5/C8 on the other side of the MAX232.
                    Brian and Robert told me the common distance from board edge for mounting holes is 0.063 in.
                    I have determined that the constraints of the case will be determined later.
                    The following data about screws is useful, comparing #6-32 or #4-40: #6-32 or #4-40.
March 16, 2018 -    Got Brian's opinion on some small board changes that I noticed around the USB port.
                    Asked Robert for smaller LEDs, I plan on connecting the Rx and Tx LED pins on the MCP2200. I have not designed the board for it yet.
                    Discussed with Brian how to have the LEDs off normally and ON when data is being sent. Sink, instead of source the current.
                    Tested the Tx LED on the board. It works. Have not yet tested Rx LED.
                    I made changes to the MultiSim and ExpressPCB adding the 2 resistors and 2 LEDs required for Tx and Rx LEDs.
March 20, 2018 -    Tested Rx and Tx LEDs on the MCP2200 board. They work fine. They only flash when data is being sent and are normally off.
                    Changed R2 to a 0.6 in resister, unsure if a 0.4, like the rest of them will fit. R2, on the bread board is a bigger resistor than the others.
March 21, 2018 -    Asked Robert about resistor sizes. He suggested measuring the resistors using the red resistor measuring tool found in the soldering lab.
                    Discussed with Brian best ways to rotate both LEDs in ExpressPCB he suggested either deleting them
                    and re-adding them or adding points, deleting the connecting traces, then rotate and reconnect the traces.
                    Printed out the board layout on paper, actual size.
                    Placed all of the components on the paper, with foam in behind. Found that R2 should be 0.4 in resistor, not 0.6 in.
                    Asked Robert for an example 6-32 mounting screw. Determined hole-size is wrong. Robert showed me a table in the drill press room with screw sizes and tap sizes lined up.
                    Brian suggested making sure all of the holes are far way from other components in case they need to be drilled out after board manufacturing.
                    After making the holes bigger, I decided that only 4 screws, instead of 6, are needed. 
                    Discussed with Brian number of mounting screws, he said 4 is plenty, 2 may do. I decided to get rid of the 5th screw and just have 4.
                    Reprinted the board on paper, sized the screws and R2, using a smaller 1.5k resistor. The smaller R2 resistor fits the 0.4 in hole spacing perfectly.
                    Discussion with Brian about stand-offs, he suggested using something pre-made (not 3D printed), nylon stand-offs or for less height using nylon washers.
                    Small trace angle changes around some of the components (mainly R2, R4, C4, and C3), in ExpressPCB.
March 22, 2018 -    After a quick last continuity test (just Power and ground), I clicked the Order board button and it gives an error.
                    The error message says there are 3 items on the board with thicknesses or pad sizes less than 0.152mm
                    I solved the errors which were caused by text (including + and - signs) being too small.
                    I ordered the board from ExpressPCB, $71 + shipping, total $113 USD. Ships March 26, arrives April 2.
March 23, 2018 -    Discussed Case design with Robert. He suggested using self-tapping screws and mounting the board with 4 screws plus another 4 screws for the case.
                    Started designing a case in Fusion360. 
                    Discussion with Robert about mounting pads on the case for both attaching the board to the bottom of the case and attaching the top of the case.
                    He suggested going no smaller than 3/8".
                    I decided to make my pads that hold the case together 1cm squared.
                    I determined the inside height required for the case to be 18mm = 4mm (board mounting pads) + 1.5mm (board) + 10mm (capacitor, tallest component) + 2.5mm (extra space)
March 24, 2018 -    Decided to put indentations on the top of the case to recess the screws (2.5mm down, 8.5mm squared). Added 4 holes on the top half of the case, 2mm diameter.
                    2mm is the hole size, #6-32 screws are 0.1380" in diameter, a little over 3.5mm.
                    I have not yet added holes on the bottom half of the case because I don't know the exact screw length yet.
                    Found some good 3D printing tips here: https://innovationstation.utexas.edu/tip-design/
                    According to that site, vertical holes, which are what mine are should be calculated using this formula: 
                    y = 1.0155x + 0.2795 vertical
                    Where x is your desired hole diameter in mm, and y is the adjusted diameter (use for CAD drawing).
                    In this case, in order to get a 2mm hole, I need to make my hole at least 2.3105 mm wide.
                    I have not yet adjusted my design.
March 25, 2018 -    I discussed with Brian hole sizes. 
                    He suggested using the formula I found online and make the holes larger in Fusion360.
                    New calculated hole size (desired finished hole = 3.3mm): 3.63mm
                    Tested the hole on a 1cm cube, it still does not screw in easily.
                    Did another one, just to be sure it would still be too small. It was.
                    New calculated hole size (desired finished hole = 3.4mm): 3.73mm
                    A little bigger than I wanted.
                    New calculated hole size (desired finished hole = 3.35mm): 3.68mm
                    This one was still a little to loose.
                    Decided that the best hole size is finished 3.3mm, 3.63mm design.
March 28, 2018 -    Asked Brian about which parts to solder first.
                    He confirmed my suggestion to start with the SOIC, MCP2200.
                    My PCB arrived at my house today.
                    I plan on starting the board tomorrow.
                    Made several PHP adjustments. It now will display an error message if the java program can not send the message on the first try (within 15 seconds).
                    If it does send it, it will still wait 15 seconds before displaying the success message.
                    I had to look up several things online, including sleep() in php, how to set a variable in php, new line character in php.
March 29, 2018 -    I started soldering the components to the board.
                    I started with the MCP2200 and the Mini USB port.
                    I had a small problem with soldering the Mini USB port.
                    I accidentally created a solder bridge between 2 of the pin connectors on the back of the port.
                    Brian had to show me how to desolder the bridge. 
                    It turns out I was using the right method (using solder braid) but I should have used the smaller braid.
                    Brian also suggested I use a chisel tip instead of a conical tip.
                    Robert found a small chisel tip that I used to solder the rest of the components.
                    When I was nearly finished solder the components (all except for the LEDs) I asked Robert for a hack-saw.
                    Robert suggested next time I cut the board before soldering the components on it.
                    I cut the board, on the lines on the silk screen.
                    I was off a little due to sawing back and forth.
                    I asked Robert for a piece of 120 Grit sandpaper to smooth down the edges.
                    It seems square enough now.
                    Tested some LEDs again, found a Red and Green LED that both work.
                    Discussed with Robert the height the LEDs should be, so that the user can see the light.
                    He suggested attaching pin headers to the board and run Dupont cables to the LEDs that would be attached to the top case.
                    I have attached bent pin headers to the board.
                    I then soldered female pin headers to Dupont wires and clipped then into their black cases.
                    Tested the finished circuit board. Windows says USB device not recognized.
                    I check the oscilloscope output, nothing. Going to remove and short R1.
                    Removed R1 and soldered a wire across it.
                    Tested it again. Still says device not recognized.
                    Checked oscillator, it is oscillating at 12MHz.
March 30, 2018 -    Checked MultiSim schematic against board design, noticed that R2 in MultiSim is connected between Vcc and D+, not D- like on the board.
                    Tried to removed R2 from the board. Ended up breaking it.
                    I do not have another 1.5kOhm resistor at home so I tried a 1.6kOhm resistor from Vcc and Pin 19 on the MCP2200.
                    I soldered the 1.6k resistor on the Vcc side but only touched it to the Pin on the MCP2200 side.
                    Windows still shows USB device not recognized.
                    I plan to go to NSCC tomorrow to get my other 1.5kOhm resistor that I left there.
                    I found a 1.5k resistor in one of my course kits, so tomorrow I will desolder the 1.6k and solder the 1.5k on the Vcc hole.
March 31, 2018 -    I soldered the 1.5kohm resister between Pin 19 and Vcc. It did not fix the Unrecognized USB problem.
April 1, 2018 -     This morning I e-mailed Brian to ask him if the campus was open. He did not know.
                    I described the problem. He suggested making sure the (Enable, his words) Reset line was tied High or Low as per the datasheet.
                    He also suggested checking if D+ and D- are swapped. I have not tested this yet.
                    I am trying to desolder C3 and replace it with a 0.22uF instead of a 0.47uF that is currently there. I believe my solder braid is too wide.
                    I tried swapping D+ and D-, green and white wires. No change. Still comes up USB Device not recognized.
                    Added correct hole size to top and bottom case design, including mounting holes. All are 3.63mm wide.
                    Mounting holes are 3.63mm wide, finished hole 3.3mm. 3mm deep.
                    Case holes are 3.63mm wide, finished hole 3.3mm. Max 17mm deep.
                    I had to make the mounting pads on the bottom case larger, the holes required were much bigger than expected.
April 3, 2018 -     Printed the bottom case on the 3D-printer.
                    Had to stop it because I realized that it was missing supports so all of the overhangs drooped down.
                    I added 1mm supports to the overhangs and it reprinted fine.
                    I then cut out the supports and it looks fine. I have not tested it with the board yet.
                    Realized that the holes in the case bottom are slightly too large.
                    Brian suggested tapping them out to be threaded #6-32 size.
                    I trimmed all of the leads on the board. 
                    After some minor trimming on the bottom case it fits fine.
                    Brian helped me troubleshoot the board circuit.
                    He added a wire tying the USB shield to ground and desoldered the R2 resistor.
                    Brian also suggested desoldering the wire (instead of R1) and connecting the crystal side pad of R1 to the trace connected to Pin 3 on the MCP2200.
                    I have not done that yet.
                    Brian did desolder the R2 resistor that I moved to Pin 19 on the MCP2200. No change.
                    I re-verified the oscillator circuit, it is oscillating at 12MHz, not very noisy either.
                    Pin 18 (D-) is at 5V when plugged in.
                    Pin 19 (D+), shoots up to 5V when the USB is first connected and then is between 400-720mV peak. 
